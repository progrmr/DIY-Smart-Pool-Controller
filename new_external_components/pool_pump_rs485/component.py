#
#  __init__.py
#  Pool Controller
#
#  Generated by Gemini AI on 2025-09-28.
#
import esphome.codegen as cg
import esphome.config_validation as cv
from esphome.components import sensor, uart, binary_sensor
from esphome.const import (
    CONF_ID,
    CONF_RPM,
    CONF_POWER,
    CONF_FLOW,
    ICON_GAUGE,
    ICON_POWER,
    ICON_WATER,
    ICON_TIMER,
    UNIT_ROTATIONS_PER_MINUTE,
    UNIT_WATT,
    UNIT_PERCENT,
    UNIT_GALLON_PER_MINUTE,
    UNIT_HOUR,
)

# Declare the namespace for your C++ class
pool_pump_rs485_ns = cg.esphome_ns.namespace("esphome")

# Define the C++ class
PoolPumpRS485 = pool_pump_rs485_ns.class_(
    "PoolPumpRS485", cg.Component, uart.UARTDevice
)

# Define configuration keys for your custom sensors and dependencies
CONF_WATTS = "watts"
CONF_RUN_TIME = "run_time"
CONF_TARGET_RUN_HOURS = "target_run_hours"
CONF_RUN_HOURS_DEFICIT = "run_hours_deficit"
CONF_PUMP_ACTUAL_RUN_HOURS = "pump_actual_run_hours"
CONF_PUMP_TARGET_RUN_HOURS = "pump_target_run_hours"
CONF_SPA_MODE = "spa_mode"
CONF_WATER_TEMPERATURE = "water_temperature"

# Define the configuration schema
CONFIG_SCHEMA = (
    cv.COMPONENT_SCHEMA.extend(
        {
            cv.GenerateID(): cv.declare_id(PoolPumpRS485),
            
            # --- Sensors ---
            cv.Required(CONF_RPM): sensor.sensor_schema(
                unit_of_measurement=UNIT_ROTATIONS_PER_MINUTE,
                icon=ICON_GAUGE,
                accuracy_decimals=0,
            ),
            cv.Required(CONF_WATTS): sensor.sensor_schema(
                unit_of_measurement=UNIT_WATT,
                icon=ICON_POWER,
                accuracy_decimals=0,
            ),
            cv.Required(CONF_FLOW): sensor.sensor_schema(
                unit_of_measurement=UNIT_GALLON_PER_MINUTE,
                icon=ICON_WATER,
                accuracy_decimals=0,
            ),
            cv.Required(CONF_POWER): sensor.sensor_schema(
                unit_of_measurement=UNIT_PERCENT,
                icon=ICON_GAUGE,
                accuracy_decimals=0,
            ),
            cv.Required(CONF_RUN_TIME): sensor.sensor_schema(
                unit_of_measurement=UNIT_HOUR,
                icon=ICON_TIMER,
                accuracy_decimals=2,
            ),
            cv.Required(CONF_TARGET_RUN_HOURS): sensor.sensor_schema(
                unit_of_measurement=UNIT_HOUR,
                icon=ICON_TIMER,
                accuracy_decimals=2,
            ),
            cv.Required(CONF_RUN_HOURS_DEFICIT): sensor.sensor_schema(
                unit_of_measurement=UNIT_HOUR,
                icon=ICON_TIMER,
                accuracy_decimals=2,
            ),

            # --- Dependencies on other components ---
            cv.Required(CONF_PUMP_ACTUAL_RUN_HOURS): cv.use_id(cg.global_variable),
            cv.Required(CONF_PUMP_TARGET_RUN_HOURS): cv.use_id(cg.global_variable),
            cv.Required(CONF_SPA_MODE): cv.use_id(binary_sensor.BinarySensor),
            cv.Required(CONF_WATER_TEMPERATURE): cv.use_id(sensor.Sensor),
        }
    )
    .extend(uart.UART_DEVICE_SCHEMA)
)

async def to_code(config):
    # Register this component with a UART bus
    var = cg.new_Pvariable(config[CONF_ID])
    await cg.register_component(var, config)
    await uart.register_uart_device(var, config)

    # Link the YAML sensor configurations to the C++ member pointers
    sens = await sensor.new_sensor(config[CONF_RPM])
    cg.add(var.rpmSensor, sens)
    
    sens = await sensor.new_sensor(config[CONF_WATTS])
    cg.add(var.wattsSensor, sens)

    sens = await sensor.new_sensor(config[CONF_FLOW])
    cg.add(var.flowSensor, sens)

    sens = await sensor.new_sensor(config[CONF_POWER])
    cg.add(var.powerSensor, sens)

    sens = await sensor.new_sensor(config[CONF_RUN_TIME])
    cg.add(var.runTimeSensor, sens)

    sens = await sensor.new_sensor(config[CONF_TARGET_RUN_HOURS])
    cg.add(var.targetRunHours, sens)

    sens = await sensor.new_sensor(config[CONF_RUN_HOURS_DEFICIT])
    cg.add(var.runHoursDeficit, sens)

    # Link dependencies
    pump_actual_run_hours = await cg.get_variable(config[CONF_PUMP_ACTUAL_RUN_HOURS])
    cg.add(var.set_pump_actual_run_hours(pump_actual_run_hours))

    pump_target_run_hours = await cg.get_variable(config[CONF_PUMP_TARGET_RUN_HOURS])
    cg.add(var.set_pump_target_run_hours(pump_target_run_hours))

    spa_mode = await cg.get_variable(config[CONF_SPA_MODE])
    cg.add(var.set_spa_mode(spa_mode))

    water_temperature = await cg.get_variable(config[CONF_WATER_TEMPERATURE])
    cg.add(var.set_water_temperature(water_temperature))
    
    # Register the services to call your public C++ methods
    cg.register_service(
        var,
        "request_pump_speed",
        [cg.int_],
        "speed",
    )
    
    cg.register_service(
        var,
        "print_debug_info",
        [],
    )
